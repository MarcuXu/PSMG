import numpy as np
from scipy.stats import rankdata

data = {
    'LS': [0.674508, 0.629174, 0.805343, 0.477076, 0.707686, 0.853502, 0.37967, 0.587831, 0.792621, 0.841503, 0.391869, 0.603855, 0.666031, 0.518825, 0.532301, 0.927659, 0.641813, 0.674761, 0.880241, 0.85515, 0.964842, 0.925932, 0.418817, 0.381306, 0.965588, 0.470725, 0.553841, 0.489397, 0.557359, 0.634495, 0.677606, 0.92121, 0.542499, 0.547309, 0.634623, 0.86118, 0.938489, 0.301564, 0.721836, 0.920096],
    'SI': [0.605469, 0.643337, 0.810865, 0.551308, 0.721937, 0.838524, 0.305894, 0.582546, 0.742525, 0.839346, 0.361636, 0.658356, 0.649846, 0.49958, 0.487819, 0.944021, 0.675964, 0.629519, 0.879795, 0.850656, 0.96913, 0.92297, 0.525558, 0.369892, 0.969649, 0.354665, 0.397053, 0.493795, 0.513824, 0.611257, 0.633596, 0.910928, 0.447699, 0.698255, 0.63547, 0.824926, 0.940283, 0.172131, 0.739737, 0.907185],
    'RLW': [0.660522, 0.699565, 0.784208, 0.614664, 0.710413, 0.852746, 0.525922, 0.590701, 0.781065, 0.828459, 0.435917, 0.649624, 0.642267, 0.485509, 0.496826, 0.936958, 0.692623, 0.692704, 0.863174, 0.863663, 0.969981, 0.925884, 0.532604, 0.439109, 0.968481, 0.270035, 0.536849, 0.518412, 0.585699, 0.573045, 0.689742, 0.920841, 0.506551, 0.744096, 0.700286, 0.848058, 0.920634, 0.334979, 0.743324, 0.915092],
    'DWA': [0.601011, 0.694772, 0.805852, 0.526468, 0.644539, 0.853222, 0.435493, 0.595648, 0.766491, 0.793745, 0.483148, 0.566416, 0.661159, 0.501786, 0.52895, 0.930466, 0.670795, 0.67401, 0.875637, 0.856966, 0.969849, 0.916933, 0.472374, 0.381433, 0.971763, 0.388247, 0.535007, 0.509051, 0.514693, 0.602992, 0.676065, 0.918841, 0.52414, 0.698231, 0.605316, 0.817104, 0.93307, 0.406382, 0.733954, 0.915583],
    'UW': [0.680835, 0.682847, 0.793043, 0.598745, 0.719906, 0.85418, 0.416758, 0.602835, 0.80211, 0.837242, 0.422405, 0.645247, 0.677602, 0.532151, 0.523332, 0.912494, 0.666311, 0.689798, 0.867185, 0.859685, 0.969506, 0.922828, 0.361243, 0.377269, 0.971083, 0.369058, 0.558804, 0.530309, 0.536716, 0.623293, 0.669581, 0.918931, 0.529687, 0.617909, 0.671636, 0.830528, 0.926027, 0.292019, 0.739895, 0.918248],
    'MGDA': [0.580268, 0.541938, 0.741985, 0.513969, 0.688325, 0.809615, 0.286149, 0.53874, 0.725126, 0.734938, 0.26825, 0.57273, 0.544861, 0.483445, 0.455156, 0.93184, 0.682818, 0.583543, 0.855537, 0.844479, 0.948818, 0.842124, 0.486756, 0.303962, 0.96737, 0.281933, 0.282213, 0.419642, 0.455226, 0.487664, 0.673579, 0.894242, 0.232399, 0.69244, 0.523879, 0.838425, 0.919256, 0.173168, 0.721837, 0.893644],
    'PCGRAD': [0.633572, 0.67772, 0.802454, 0.58917, 0.70579, 0.852459, 0.390793, 0.591173, 0.777831, 0.833013, 0.438529, 0.633737, 0.66121, 0.533977, 0.527388, 0.915318, 0.677616, 0.678112, 0.878838, 0.853682, 0.970443, 0.92431, 0.479799, 0.452662, 0.970309, 0.410024, 0.516867, 0.449154, 0.50779, 0.56268, 0.687052, 0.918178, 0.462208, 0.674746, 0.658769, 0.855844, 0.933111, 0.335215, 0.728282, 0.91711],
    'GRADDROP': [0.606724, 0.681252, 0.794538, 0.511686, 0.682811, 0.8475, 0.47926, 0.57048, 0.773472, 0.79304, 0.447875, 0.620537, 0.649385, 0.514782, 0.513937, 0.932999, 0.648528, 0.687015, 0.86907, 0.853846, 0.965032, 0.910384, 0.496535, 0.395849, 0.968003, 0.401195, 0.575353, 0.505221, 0.529026, 0.597495, 0.657644, 0.916241, 0.514581, 0.643852, 0.670399, 0.861911, 0.933961, 0.330984, 0.701564, 0.911145],
    'CAGRAD': [0.650484, 0.688455, 0.807876, 0.559622, 0.734482, 0.849524, 0.376986, 0.560734, 0.780147, 0.812924, 0.425553, 0.625139, 0.586903, 0.479754, 0.506018, 0.933833, 0.69863, 0.662066, 0.87787, 0.860424, 0.966925, 0.924098, 0.512903, 0.404175, 0.971249, 0.368823, 0.597986, 0.550715, 0.521919, 0.62555, 0.699806, 0.914068, 0.538428, 0.681895, 0.673239, 0.816989, 0.936797, 0.386447, 0.73618, 0.910414],
    'IMTL_G': [0.662423, 0.665783, 0.818785, 0.561001, 0.682861, 0.853249, 0.421144, 0.574463, 0.784683, 0.836589, 0.49997, 0.603008, 0.65738, 0.517264, 0.532018, 0.922063, 0.701806, 0.687252, 0.882556, 0.864719, 0.972997, 0.920774, 0.529638, 0.36927, 0.970758, 0.466751, 0.605276, 0.466815, 0.552882, 0.594073, 0.716006, 0.916843, 0.516575, 0.691428, 0.682021, 0.866776, 0.938881, 0.408585, 0.751725, 0.919949],
    'NASH_MTL': [0.672912, 0.689721, 0.816694, 0.549246, 0.708571, 0.861129, 0.355998, 0.566826, 0.794936, 0.840971, 0.355171, 0.641733, 0.624947, 0.526574, 0.527919, 0.953912, 0.698416, 0.697017, 0.885158, 0.857959, 0.9715, 0.92486, 0.489709, 0.395136, 0.97174, 0.393345, 0.59008, 0.486319, 0.574202, 0.512717, 0.721437, 0.918092, 0.498708, 0.665033, 0.677703, 0.878321, 0.937796, 0.3716, 0.70561, 0.915606],
    'FAMO': [0.653908, 0.677715, 0.815858, 0.539541, 0.720842, 0.841133, 0.449737, 0.582937, 0.74888, 0.810123, 0.440008, 0.620478, 0.662617, 0.513137, 0.540401, 0.952775, 0.691872, 0.688817, 0.884776, 0.85874, 0.970955, 0.921661, 0.489195, 0.416575, 0.972013, 0.459612, 0.609676, 0.506188, 0.582746, 0.631987, 0.695164, 0.916307, 0.526682, 0.686383, 0.672385, 0.862808, 0.940489, 0.320446, 0.731078, 0.920578],
    'FAIRGRAD': [0.673481, 0.6715126, 0.80895394, 0.59129095, 0.716146, 0.84868795, 0.5293899, 0.6024346, 0.79252076, 0.8232979, 0.49155608, 0.68601424, 0.6678187, 0.50076723, 0.5353463, 0.9543982, 0.6991702, 0.6246493, 0.87510586, 0.85260683, 0.9679586, 0.91303086, 0.53938675, 0.44097534, 0.9698319, 0.30875763, 0.5560105, 0.5475425,  0.5299987, 0.6050991, 0.72113657, 0.9100189, 0.48792267, 0.6447788, 0.7013081, 0.8596742, 0.92936283, 0.40353844, 0.7261722, 0.9126637],
    'PMGD': [0.66314465, 0.6998716,  0.8265374,  0.6106443,  0.71039355, 0.8564706,
             0.50622475, 0.6126753,  0.6380781,  0.8371299,  0.29906544, 0.66084486,
             0.68001616, 0.5364478,  0.54196155, 0.9318453,  0.6644182,  0.6471127,
             0.8841846,  0.8619348,  0.9660285,  0.91927344, 0.5061461,  0.46894577,
             0.96648127, 0.3970516, 0.49762282, 0.43706706, 0.32224825, 0.60596544, 0.6901885, 0.92159003, 0.49457145, 0.7307542, 0.7002012, 0.8736718, 0.9419575, 0.37763807, 0.73659676, 0.9206073],
}

# Convert the data dictionary to a NumPy array
results = np.array([data[method] for method in data])

# Initialize the rank matrix
ranks = np.zeros_like(results)

# Calculate ranks per task, accounting for ties correctly
for j in range(results.shape[1]):
    ranks[:, j] = rankdata(results[:, j], method='min')

# Adjusting ranks for the specific tasks
reverse_tasks = range(40)  # Tasks that need the reverse ranking
print(reverse_tasks)
for j in reverse_tasks:
    ranks[:, j] = 15 - ranks[:, j]

# Compute the mean rank for each method
method_rank = ranks.mean(axis=1)

# Display results
method_names = list(data.keys())
print("Ranks for each method in each task:")
for i, method in enumerate(method_names):
    rank_list = ranks[i, :]
    rank_str = ", ".join(f"{rank}" for rank in rank_list)
    print(f"{method}: [{rank_str}] - Mean Rank: {method_rank[i]:.2f}")
